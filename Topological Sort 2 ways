//Topological Sort by the use of dfs and stack.(Gives the topo ans ) but not the minimal one. If we want to get the minimal in topological sort then use, the bfs approach with indegree
// code , four things needed, adj, priority queue(min heap) to track minimum on each time , ans vector to store, and indegree to store the incoming degree vector. 

vector<int> Solution::solve(int A, vector<vector<int> > &B) {
    vector<int>adj[A+1];
    vector<int>topo;
    vector<int>indegree(A+1,0);
    priority_queue<int,vector<int>,greater<int>>pq;

    for(int i=0;i<B.size();i++){
        adj[B[i][0]].push_back(B[i][1]);
    }
    
    for(int i=1;i<=A;i++){
        for(auto it:adj[i]){
            indegree[it]++;
        }
    }
   
    for(int i=1;i<=A;i++){
        if(indegree[i]==0){
            pq.push(i);
        }
    }

    int cnt=0;
    while(!pq.empty()){
        int u=pq.top();
        pq.pop();
        topo.push_back(u);
        for(auto it:adj[u]){
            indegree[it]--;
            if(indegree[it]==0){
                pq.push(it);
            }
        }
        cnt++;/// for checking that if there would be a cycle then definitely the number of nodes which will come in the pq, will  not be equal to total nodes
    }
    vector<int>topo2;
    if(cnt!=A)
    return topo2;
    else
    return topo;

}
