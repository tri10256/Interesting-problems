Given an m*n matrix mat, Originally, the 2D matrix is all 0 which means there is only sea in the matrix. The list pair has k operator and each operator has two integer A[i].x, A[i].y means that you can change the grid mat[A[i].x][A[i].y] from sea to island. Return how many island are there in the matrix after each operator.You need to return an array of size K.

We Find the solution by using the concepts of the Union Find technique. 




#include<bits/stdc++.h>
using namespace std;

void mySet(int parent[],int rank[],int size){
    
    for(int i=0;i<=size;i++){
        parent[i] = -1;
        rank[i]   = 0;
    }
}

int findPar(int u,int parent[]){
    
    if(parent[u] == -1)
    return parent[u];
    
    if(u == parent[u]){
        return parent[u];
    }
    
    return parent[u] = findPar(parent[u],parent);
    
}

bool merge(int u, int v, int parent[], int rank[]){
    
    int a = findPar(u,parent);
    int b = findPar(v,parent);
    
    bool merging = false;
    
    if(a!=b){
        
        if(rank[u]<rank[v]){
            parent[u] = v;
            merging = true;
        }
        else if(rank[u]>rank[v]){
            parent[v] = u;
            merging = true;
        }
        else{
            parent[v] = u;
            rank[u]++;
            merging = true;
        }
    }
    return merging;
}



vector<int>numIsland(int m, int n,vector<vector<int>>&options){
    
    int size = m*n+1;
    
    int parent[size];
    int rank[size];
    
    mySet(parent,rank,size);
    
    int count = 0;
    
    vector<int>ans;
    
    int dirx[] = {-1,0,1,0};
    int diry[] = {0,1,0,-1};
    
    for(int i=0;i<options.size();i++){
        
        int row = options[i][0];
        int col = options[i][1];
        
        int col_len = n;
        
       
        
        int cell = (row*col_len) + col;
        
     
        
        if(parent[cell] != -1){
            ans.push_back(cell);
            continue;
        }
        parent[cell] = cell;
        count++;
        
      for(int i=0;i<4;i++){
            
            int nx = row + dirx[i];
            int ny = col + diry[i];
            
            int ncell = nx*col_len+ny;
            
            if(nx<0 || ny<0 || nx>=m || ny>= n || parent[ncell]==-1)
            continue;
            
            int parcell = findPar(cell,parent);
            int parncell = findPar(ncell,parent);
            
            if(parcell!=parncell){
                
              bool isMerge =  merge(cell,ncell,parent,rank);
                
              count--;
    
            }
            
            
      }
    
        
      ans.push_back(count);
    }
    
    return ans;
}



int main(){
    
    int m,n,k;
    cin>>m>>n>>k;
    
    vector<vector<int>>options;
    for(int i=0;i<k;i++){
        int a,b;
        cin>>a>>b;
        options.push_back({a,b});
    }
    
    vector<int>ans;
    
    ans = numIsland(m,n,options);
    
   for(int i=0;i<ans.size();i++){
       cout<<ans[i];
   }
}
